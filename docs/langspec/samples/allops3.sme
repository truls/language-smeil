// Allops SMEIL example. Variation with multiple instance of a singe calculator
// process parameterized with an enum.

sync proc producer (const num1, const num2)
        exposed bus valbus {
            data1: u32;
            data2: u32;
        };
{
        valbus.data1 = num1;
        valbus.data2 = num2;
}

sync proc op (in inp, const operator)
  enum operators {
    ADD, DIV, MUL, SUB
  };

  bus outp {
    val: i32;
  };
{
   switch operator where {
     case ADD {
        outp.val = inp.data1 + inp.data2;
     }
     case DIV {
        outp.val = inp.data1 / inp.data2;
     }
     case MUL {
        outp.val = inp.data1 * inp.data2;
     }
     case SUB {
        outp.val = inp.data1 - inp.data2;
     }
   }
}

sync proc sink ([]in results, out result)
   var sum: i32;

{
    sum = 0;
    for i = 1 to len(results) {
       sum = sum + results[i].val;
    }
    result.agg = sum;
}

network all_ops (out result) {
    exposed bus result {
       agg: i32;
    };

        instance prod of producer (num1: 4, num2: 9);
        // instance prod2 of producer (num1: 10, num2: 5);
        for i = 0 to len(op.operators) {
           instance opproc[i] of op(operator: i, inp: prod.valbus);
        }
        instance s of sink (results: opproc[*].outp, out result);
}
